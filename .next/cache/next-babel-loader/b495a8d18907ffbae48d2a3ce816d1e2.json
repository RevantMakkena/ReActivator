{"ast":null,"code":"var _jsxFileName = \"/Users/revanthmakkena/Work/JSXPrep/revreactapp/pages/hooks/userefex.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useRef, useState, createRef } from \"react\";\n\nconst useRefEx = () => {\n  _s();\n\n  const {\n    0: currentIndex,\n    1: setCurrentIndex\n  } = useState(1);\n  const refFromUseRef = useRef();\n  const refFromCreateRef = createRef();\n\n  if (!refFromUseRef.current) {\n    refFromUseRef.current = currentIndex;\n  }\n\n  if (!refFromCreateRef.current) {\n    refFromCreateRef.current = currentIndex;\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, \"Index for UseRef is \", refFromUseRef.current), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, \"Index for CreateRef is \", refFromCreateRef.current), __jsx(\"button\", {\n    onClick: () => {\n      setCurrentIndex(prevIndex => prevIndex + 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, \"Re-render\"));\n};\n\n_s(useRefEx, \"sIoO7IPDkIAfbUB8vGp0KHbQvI8=\");\n\nexport default useRefEx;","map":{"version":3,"sources":["/Users/revanthmakkena/Work/JSXPrep/revreactapp/pages/hooks/userefex.js"],"names":["React","useRef","useState","createRef","useRefEx","currentIndex","setCurrentIndex","refFromUseRef","refFromCreateRef","current","prevIndex"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,QAAvB,EAAiCC,SAAjC,QAAiD,OAAjD;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCJ,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAMK,aAAa,GAAGN,MAAM,EAA5B;AACA,QAAMO,gBAAgB,GAAGL,SAAS,EAAlC;;AAEA,MAAI,CAACI,aAAa,CAACE,OAAnB,EAA4B;AAC1BF,IAAAA,aAAa,CAACE,OAAd,GAAwBJ,YAAxB;AACD;;AAED,MAAI,CAACG,gBAAgB,CAACC,OAAtB,EAA+B;AAC7BD,IAAAA,gBAAgB,CAACC,OAAjB,GAA2BJ,YAA3B;AACD;;AACD,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA0BE,aAAa,CAACE,OAAxC,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAA6BD,gBAAgB,CAACC,OAA9C,CAFF,EAGE;AACE,IAAA,OAAO,EAAE,MAAM;AACbH,MAAAA,eAAe,CAAEI,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAf;AACD,KAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHF,CADF;AAaD,CAzBD;;GAAMN,Q;;AA2BN,eAAeA,QAAf","sourcesContent":["import React, {useRef, useState, createRef} from \"react\";\n\nconst useRefEx = () => {\n  const [currentIndex, setCurrentIndex] = useState(1);\n  const refFromUseRef = useRef();\n  const refFromCreateRef = createRef();\n\n  if (!refFromUseRef.current) {\n    refFromUseRef.current = currentIndex;\n  }\n\n  if (!refFromCreateRef.current) {\n    refFromCreateRef.current = currentIndex;\n  }\n  return (\n    <div>\n      <div>Index for UseRef is {refFromUseRef.current}</div>\n      <div>Index for CreateRef is {refFromCreateRef.current}</div>\n      <button\n        onClick={() => {\n          setCurrentIndex((prevIndex) => prevIndex + 1);\n        }}\n      >\n        Re-render\n      </button>\n    </div>\n  );\n};\n\nexport default useRefEx;\n"]},"metadata":{},"sourceType":"module"}